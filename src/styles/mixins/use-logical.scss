@use "../functions";

@function get-logical-name ($property, $str) {
  $split-property: functions.str-split($property, '-');
  $property-head: nth($split-property, 1);
  $property-tail: nth($split-property, 2);

  @return #{$property-head}#{$str}#{$property-tail};
};

@function get-logical-values($values) {
  $results: [];

  @for $index from 1 through 4 {
    $value-index: $index;

    @if $index > length($values) {
      @if $index == 2 {
        $values: append($values, nth($values, 1));
      }@else {
        $value-index: $index - 2;
      }
    }

    $value: #{nth($values, $value-index)};
    $results: append($results, $value);
  }

  @return $results
}
@mixin border-radius($element, $values) {
  $options: start-start, start-end, end-start, end-end;
  $logical-values: get-logical-values($values);

  @for $index from 1 through 4 {
    border-#{nth($options, $index)}-radius: functions.var($element, border-#{nth($options, $index)}-radius, nth($logical-values, $index));
  }
}

@mixin default($element, $property, $values) {
  $logical-values: get-logical-values($values);

  #{get-logical-name($property, -block)}: functions.var($element, get-logical-name($property, -block),
    functions.var($element, get-logical-name($property, -block-start), nth($logical-values, 1))
    functions.var($element, get-logical-name($property, -block-end), nth($logical-values, 3))
  );
  #{get-logical-name($property, -inline)}: functions.var($element, get-logical-name($property, -inline),
    functions.var($element, get-logical-name($property, -inline-start), nth($logical-values, 4))
    functions.var($element, get-logical-name($property, -inline-end), nth($logical-values, 2))
  );
}

@mixin use-logical($element, $property, $values) {
  @if $values and $property {
    $include-border-radius: str-index($property, border-radius);

    @if $include-border-radius {
      @include border-radius($element, $values);
    } @else {
        @include default($element, $property, $values);
    }
  }
};
