@use "../functions";

@function getLogicalName ($property, $str) {
  $splittedProperty: functions.str-split($property, '-');
  $propertyHead: nth($splittedProperty, 1);
  $propertyTail: nth($splittedProperty, 2);
  @return #{$propertyHead}#{$str}#{$propertyTail};
};

@function getLogicalValues($values) {
  $results: [];
  @for $index from 1 through 4 {
    $valueIndex: $index;
    @if $index > length($values) {
      @if $index == 2 {
        $values: append($values, nth($values, 1));
      }@else {
        $valueIndex: $index - 2;
      }
    }
    $value: #{nth($values, $valueIndex)};
    $results: append($results, $value);
  }
  @return $results
}

@mixin use-logical($element, $property, $values) {
  @if $values and $property {
    $includeBorderRadius: str-index($property, border-radius);
    @if $includeBorderRadius {
      $options: start-start, start-end, end-start, end-end;
      $logicalValues: getLogicalValues($values);
      @for $index from 1 through 4 {
        border-#{nth($options, $index)}-radius: functions.var($element, border-#{nth($options, $index)}-radius, nth($logicalValues, $index));
      }
    } @else {
      $logicalValues: getLogicalValues($values);
      #{getLogicalName($property, -block)}: functions.var($element, getLogicalName($property, -block),
        functions.var($element, getLogicalName($property, -block-start), nth($logicalValues, 1))
        functions.var($element, getLogicalName($property, -block-end), nth($logicalValues, 3))
      );
      #{getLogicalName($property, -inline)}: functions.var($element, getLogicalName($property, -inline),
        functions.var($element, getLogicalName($property, -inline-start), nth($logicalValues, 4))
        functions.var($element, getLogicalName($property, -inline-end), nth($logicalValues, 2))
      );
    }
  }
};
