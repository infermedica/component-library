@use "../functions";

@function getLogicalValues($values) {
  $results: [];
  @for $index from 1 through 4 {
    $valueIndex: $index;
    @if $index > length($values) {
      @if $index == 2 {
        $values: append($values, nth($values, 1));
      }@else {
        $valueIndex: $index - 2;
      };
    }
    $value: #{nth($values, $valueIndex)};
    $results: append($results, $value);
  }
  @return $results
}

@mixin use-logical($element, $property, $values) {
  @if if $values and $property {
    $splittedProperty: functions.str-split($property, '-');
    $propertyHead: nth($splittedProperty, 1);
    $propertyTail: nth($splittedProperty, 2);
    $propertyBlock: #{$propertyHead}-block#{$propertyTail};
    $propertyInline: #{$propertyHead}-inline#{$propertyTail};
    $varHead: --#{$element}-;
    $varBlock: #{$varHead}#{$propertyBlock};
    $varInline: #{$varHead}#{$propertyInline};
    $varLogical: #{$varHead}#{$propertyHead}-logical#{$propertyTail};
    $includeBorderRadius: str-index($property, border-radius);
    @if $includeBorderRadius {
      $options: start-start, start-end, end-start, end-end;
      $logicalValues: getLogicalValues($values);
      @for $index from 1 through 4 {
        $varSecond: $varBlock;
        @if $index % 2 == 0 {
          $varSecond: $varInline;
        }
        border-#{nth($options, $index)}-radius: var($varLogical, var($varSecond, nth($logicalValues, $index)));
      }
    } @else {
      $logicalValues: getLogicalValues($values);
      #{$propertyBlock}: var($varLogical, var($varBlock, nth($logicalValues, 1) nth($logicalValues, 3)));
      #{$propertyInline}: var($varLogical, var($varInline, nth($logicalValues, 4) nth($logicalValues, 2)));
    }
  }
};